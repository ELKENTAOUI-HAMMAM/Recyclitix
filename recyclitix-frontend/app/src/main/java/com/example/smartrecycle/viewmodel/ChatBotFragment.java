package com.example.smartrecycle.viewmodel;

import android.os.Bundle;
import android.os.Handler;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.fragment.app.Fragment;

import com.example.smartrecycle.R;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class ChatBotFragment extends Fragment {
    private EditText inputMessage;
    private ImageButton sendButton;
    private LinearLayout chatContainer;
    private ProgressBar progressBar;
    private ScrollView scrollView;
    private List<ChatMessage> chatHistory;
    private Random random;

    private static class ChatMessage {
        String message;
        boolean isUser;
        long timestamp;

        ChatMessage(String message, boolean isUser) {
            this.message = message;
            this.isUser = isUser;
            this.timestamp = System.currentTimeMillis();
        }
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_chatbot, container, false);
        
        inputMessage = view.findViewById(R.id.inputMessage);
        sendButton = view.findViewById(R.id.sendButton);
        chatContainer = view.findViewById(R.id.chatContainer);
        progressBar = view.findViewById(R.id.progressBar);
        scrollView = view.findViewById(R.id.scrollView);
        
        // Configuration du bouton retour
        ImageButton backButton = view.findViewById(R.id.backButton);
        backButton.setOnClickListener(v -> {
            if (getActivity() != null) {
                getActivity().onBackPressed();
            }
        });
        
        chatHistory = new ArrayList<>();
        random = new Random();

        sendButton.setOnClickListener(v -> sendMessage());
        inputMessage.setOnEditorActionListener((v, actionId, event) -> {
            if (actionId == EditorInfo.IME_ACTION_SEND) {
                sendMessage();
                return true;
            }
            return false;
        });

        // Message de bienvenue avec suggestions
        addBotMessage("Bonjour ! Je suis RecycleBot ü§ñ, votre assistant pour le recyclage. Posez-moi vos questions sur le tri des d√©chets, les mat√©riaux recyclables, ou tout autre sujet li√© au recyclage !");
        
        // Ajouter des suggestions de questions
        addQuickSuggestions();
        
        return view;
    }

    private void addQuickSuggestions() {
        // Cr√©er un layout pour les suggestions
        LinearLayout suggestionsLayout = new LinearLayout(requireContext());
        suggestionsLayout.setOrientation(LinearLayout.VERTICAL);
        suggestionsLayout.setPadding(16, 16, 16, 16);
        
        TextView suggestionsTitle = new TextView(requireContext());
        suggestionsTitle.setText("üí° Questions populaires :");
        suggestionsTitle.setTextSize(18);
        suggestionsTitle.setTypeface(null, android.graphics.Typeface.BOLD);
        suggestionsTitle.setTextColor(getResources().getColor(R.color.textColor));
        suggestionsTitle.setPadding(0, 0, 0, 12);
        suggestionsLayout.addView(suggestionsTitle);
        
        String[] suggestions = {
            "Comment recycler le plastique ?",
            "O√π jeter le verre ?",
            "Que faire des piles ?",
            "Comment trier les d√©chets ?",
            "O√π trouver un centre de recyclage ?"
        };
        
        for (String suggestion : suggestions) {
            androidx.cardview.widget.CardView suggestionCard = new androidx.cardview.widget.CardView(requireContext());
            suggestionCard.setRadius(12);
            suggestionCard.setElevation(2);
            suggestionCard.setCardBackgroundColor(getResources().getColor(android.R.color.white));
            suggestionCard.setUseCompatPadding(true);
            
            TextView suggestionText = new TextView(requireContext());
            suggestionText.setText(suggestion);
            suggestionText.setTextSize(14);
            suggestionText.setTextColor(getResources().getColor(R.color.textColor));
            suggestionText.setPadding(16, 12, 16, 12);
            suggestionText.setBackgroundColor(getResources().getColor(android.R.color.transparent));
            
            suggestionCard.addView(suggestionText);
            
            // Ajouter un effet de clic
            suggestionCard.setOnClickListener(v -> {
                inputMessage.setText(suggestion);
                sendMessage();
            });
            
            suggestionCard.setOnTouchListener((v, event) -> {
                switch (event.getAction()) {
                    case android.view.MotionEvent.ACTION_DOWN:
                        suggestionCard.setCardBackgroundColor(getResources().getColor(android.R.color.darker_gray));
                        break;
                    case android.view.MotionEvent.ACTION_UP:
                    case android.view.MotionEvent.ACTION_CANCEL:
                        suggestionCard.setCardBackgroundColor(getResources().getColor(android.R.color.white));
                        break;
                }
                return false;
            });
            
            LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            );
            cardParams.setMargins(0, 4, 0, 4);
            suggestionCard.setLayoutParams(cardParams);
            
            suggestionsLayout.addView(suggestionCard);
        }
        
        // Ajouter les suggestions au chat
        chatContainer.addView(suggestionsLayout);
    }

    private void sendMessage() {
        String message = inputMessage.getText().toString().trim();
        if (TextUtils.isEmpty(message)) return;
        
        // Ajouter le message utilisateur
        addUserMessage(message);
        inputMessage.setText("");
        
        // Simuler le traitement
        progressBar.setVisibility(View.VISIBLE);
        new Handler().postDelayed(() -> {
            progressBar.setVisibility(View.GONE);
            String response = getIntelligentResponse(message);
            addBotMessage(response);
        }, 800 + random.nextInt(400)); // D√©lai variable pour plus de naturel
    }

    private void addUserMessage(String message) {
        ChatMessage chatMessage = new ChatMessage(message, true);
        chatHistory.add(chatMessage);
        addMessageToUI(chatMessage);
    }

    private void addBotMessage(String message) {
        ChatMessage chatMessage = new ChatMessage(message, false);
        chatHistory.add(chatMessage);
        addMessageToUI(chatMessage);
    }

    private void addMessageToUI(ChatMessage chatMessage) {
        // Cr√©er un CardView pour chaque message
        androidx.cardview.widget.CardView messageCard = new androidx.cardview.widget.CardView(requireContext());
        messageCard.setRadius(16);
        messageCard.setElevation(4);
        messageCard.setUseCompatPadding(true);
        
        // Cr√©er le TextView pour le contenu
        TextView messageView = new TextView(requireContext());
        messageView.setText(chatMessage.message);
        messageView.setTextSize(16);
        messageView.setPadding(20, 16, 20, 16);
        messageView.setMaxWidth((int) (getResources().getDisplayMetrics().widthPixels * 0.85f));
        messageView.setLineSpacing(4, 1.2f);
        
        // Configuration du layout
        LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.WRAP_CONTENT,
            LinearLayout.LayoutParams.WRAP_CONTENT
        );
        cardParams.setMargins(16, 8, 16, 8);
        messageCard.setLayoutParams(cardParams);
        
        if (chatMessage.isUser) {
            // Message utilisateur (√† droite)
            messageCard.setCardBackgroundColor(getResources().getColor(R.color.primaryColor));
            messageView.setTextColor(getResources().getColor(android.R.color.white));
            cardParams.gravity = android.view.Gravity.END;
            
            // Ajouter une ic√¥ne utilisateur
            LinearLayout userLayout = new LinearLayout(requireContext());
            userLayout.setOrientation(LinearLayout.HORIZONTAL);
            userLayout.setGravity(android.view.Gravity.END);
            userLayout.setPadding(8, 0, 8, 0);
            
            TextView userIcon = new TextView(requireContext());
            userIcon.setText("üë§");
            userIcon.setTextSize(20);
            userIcon.setPadding(0, 0, 8, 0);
            
            userLayout.addView(userIcon);
            userLayout.addView(messageView);
            messageCard.addView(userLayout);
            
        } else {
            // Message bot (√† gauche)
            messageCard.setCardBackgroundColor(getResources().getColor(android.R.color.white));
            messageView.setTextColor(getResources().getColor(R.color.textColor));
            cardParams.gravity = android.view.Gravity.START;
            
            // Ajouter une ic√¥ne bot
            LinearLayout botLayout = new LinearLayout(requireContext());
            botLayout.setOrientation(LinearLayout.HORIZONTAL);
            botLayout.setGravity(android.view.Gravity.START);
            botLayout.setPadding(8, 0, 8, 0);
            
            TextView botIcon = new TextView(requireContext());
            botIcon.setText("ü§ñ");
            botIcon.setTextSize(20);
            botIcon.setPadding(0, 0, 8, 0);
            
            botLayout.addView(botIcon);
            botLayout.addView(messageView);
            messageCard.addView(botLayout);
        }
        
        chatContainer.addView(messageCard);
        
        // Animation d'apparition
        messageCard.setAlpha(0f);
        messageCard.animate().alpha(1f).setDuration(300).start();
        
        // Scroll vers le bas
        new Handler().postDelayed(() -> {
            if (scrollView != null) {
                scrollView.fullScroll(ScrollView.FOCUS_DOWN);
            }
        }, 100);
    }

    private String getIntelligentResponse(String message) {
        String lowerMessage = message.toLowerCase();
        
        // Salutations
        if (containsAny(lowerMessage, "bonjour", "salut", "hello", "hi", "coucou", "hey")) {
            String[] greetings = {
                "Bonjour ! Comment puis-je vous aider avec le recyclage aujourd'hui ? üå±",
                "Salut ! Pr√™t(e) √† recycler ? Posez-moi vos questions ! ‚ôªÔ∏è",
                "Hello ! Je suis l√† pour vous guider dans le tri des d√©chets ! üåç"
            };
            return greetings[random.nextInt(greetings.length)];
        }

        // Plastique
        if (containsAny(lowerMessage, "plastique", "bouteille plastique", "emballage plastique", "sachet plastique")) {
            return "‚ôªÔ∏è **PLASTIQUE** :\n" +
                   "‚Ä¢ Rincez les emballages avant de les jeter\n" +
                   "‚Ä¢ V√©rifiez le symbole de recyclage (triangle avec fl√®ches)\n" +
                   "‚Ä¢ Les bouteilles, flacons et emballages rigides vont dans le bac de tri\n" +
                   "‚Ä¢ Les sacs plastique fins vont dans la poubelle normale\n" +
                   "‚Ä¢ √âvitez les plastiques souples et les films alimentaires";
        }

        // Verre
        if (containsAny(lowerMessage, "verre", "bouteille verre", "pot verre", "bocal")) {
            return "ü´ô **VERRE** :\n" +
                   "‚Ä¢ Le verre se recycle √† l'infini !\n" +
                   "‚Ä¢ D√©posez dans le conteneur √† verre (bouteilles, bocaux, pots)\n" +
                   "‚Ä¢ Retirez les bouchons et couvercles\n" +
                   "‚Ä¢ Ne mettez PAS : vaisselle, miroirs, vitres, ampoules\n" +
                   "‚Ä¢ Rincez l√©g√®rement avant de jeter";
        }

        // Papier et carton
        if (containsAny(lowerMessage, "papier", "carton", "journal", "magazine", "bo√Æte carton")) {
            return "üì¶ **PAPIER & CARTON** :\n" +
                   "‚Ä¢ Papiers, journaux, magazines, cartons\n" +
                   "‚Ä¢ Pliez les cartons pour gagner de place\n" +
                   "‚Ä¢ Retirez le scotch et les agrafes\n" +
                   "‚Ä¢ √âvitez : papiers gras, cartons souill√©s, papier photo\n" +
                   "‚Ä¢ Les cartons de pizza tr√®s gras vont √† la poubelle normale";
        }

        // M√©taux
        if (containsAny(lowerMessage, "m√©tal", "canette", "aluminium", "bo√Æte conserve", "ferraille")) {
            return "ü•´ **M√âTAUX** :\n" +
                   "‚Ä¢ Canettes, bo√Ætes de conserve, emballages m√©talliques\n" +
                   "‚Ä¢ Rincez les bo√Ætes de conserve\n" +
                   "‚Ä¢ Les couvercles et capsules vont aussi au recyclage\n" +
                   "‚Ä¢ L'aluminium et l'acier sont 100% recyclables\n" +
                   "‚Ä¢ √âvitez les objets m√©talliques pointus ou dangereux";
        }

        // D√©chets organiques
        if (containsAny(lowerMessage, "compost", "d√©chets organiques", "biod√©chets", "√©pluchures", "marc caf√©")) {
            return "üçÉ **D√âCHETS ORGANIQUES** :\n" +
                   "‚Ä¢ √âpluchures de fruits et l√©gumes\n" +
                   "‚Ä¢ Marc de caf√©, sachets de th√©\n" +
                   "‚Ä¢ Coquilles d'≈ìufs, restes de pain\n" +
                   "‚Ä¢ Feuilles mortes, herbe tondue\n" +
                   "‚Ä¢ √âvitez : viande, poisson, produits laitiers";
        }

        // √âlectronique
        if (containsAny(lowerMessage, "√©lectronique", "√©lectrique", "pile", "batterie", "t√©l√©phone", "ordinateur")) {
            return "üîã **D√âCHETS √âLECTRONIQUES** :\n" +
                   "‚Ä¢ Piles et batteries : points de collecte en magasin\n" +
                   "‚Ä¢ Petits appareils : d√©chetterie ou magasins\n" +
                   "‚Ä¢ Gros appareils : d√©chetterie ou reprise en magasin\n" +
                   "‚Ä¢ Ne jetez JAMAIS les piles √† la poubelle !\n" +
                   "‚Ä¢ Les DEEE contiennent des m√©taux pr√©cieux recyclables";
        }

        // Textiles
        if (containsAny(lowerMessage, "v√™tement", "textile", "tissu", "linge", "chaussure")) {
            return "üëï **TEXTILES** :\n" +
                   "‚Ä¢ V√™tements, chaussures, linge de maison\n" +
                   "‚Ä¢ D√©posez dans les conteneurs textiles\n" +
                   "‚Ä¢ M√™me les v√™tements ab√Æm√©s peuvent √™tre recycl√©s\n" +
                   "‚Ä¢ Nettoyez et pliez avant de donner\n" +
                   "‚Ä¢ √âvitez les textiles souill√©s ou humides";
        }

        // M√©dicaments
        if (containsAny(lowerMessage, "m√©dicament", "pilule", "sirop", "pommade")) {
            return "üíä **M√âDICAMENTS** :\n" +
                   "‚Ä¢ Rapportez en pharmacie (m√™me p√©rim√©s)\n" +
                   "‚Ä¢ Ne jetez JAMAIS √† la poubelle ou dans les toilettes\n" +
                   "‚Ä¢ Les emballages en carton vont au recyclage\n" +
                   "‚Ä¢ Les flacons en verre vont au verre\n" +
                   "‚Ä¢ Protection de l'environnement et de la sant√© !";
        }

        // Huiles
        if (containsAny(lowerMessage, "huile", "graisse", "friture")) {
            return "üõ¢Ô∏è **HUILES** :\n" +
                   "‚Ä¢ Huiles de friture : d√©chetterie ou points de collecte\n" +
                   "‚Ä¢ Ne versez JAMAIS dans l'√©vier ou les toilettes\n" +
                   "‚Ä¢ Laissez refroidir et versez dans un r√©cipient ferm√©\n" +
                   "‚Ä¢ 1 litre d'huile pollue 1000 litres d'eau !\n" +
                   "‚Ä¢ Les huiles sont transform√©es en biocarburant";
        }

        // Questions g√©n√©rales sur le recyclage
        if (containsAny(lowerMessage, "recycler", "recyclage", "tri", "trier")) {
            return "‚ôªÔ∏è **COMMENT RECYCLER** :\n" +
                   "1. **V√©rifiez** le type de d√©chet\n" +
                   "2. **Nettoyez** si n√©cessaire\n" +
                   "3. **Triez** par mat√©riau\n" +
                   "4. **D√©posez** dans le bon conteneur\n" +
                   "5. **En cas de doute**, demandez-moi !\n\n" +
                   "Les principaux mat√©riaux recyclables : plastique, verre, papier, m√©tal, organique.";
        }

        // Centres de recyclage
        if (containsAny(lowerMessage, "centre recyclage", "d√©chetterie", "point collecte", "o√π jeter")) {
            return "üó∫Ô∏è **POINTS DE COLLECTE** :\n" +
                   "‚Ä¢ Utilisez la carte de l'application pour trouver les centres\n" +
                   "‚Ä¢ D√©chetteries pour gros volumes\n" +
                   "‚Ä¢ Points de collecte en magasin (piles, cartouches)\n" +
                   "‚Ä¢ Conteneurs de proximit√© (verre, textiles)\n" +
                   "‚Ä¢ Consultez votre mairie pour les horaires";
        }

        // Impact environnemental
        if (containsAny(lowerMessage, "impact", "environnement", "pollution", "√©cologie", "plan√®te")) {
            return "üåç **IMPACT ENVIRONNEMENTAL** :\n" +
                   "‚Ä¢ Le recyclage √©conomise les ressources naturelles\n" +
                   "‚Ä¢ R√©duit la pollution de l'air et de l'eau\n" +
                   "‚Ä¢ Diminue les √©missions de CO2\n" +
                   "‚Ä¢ Cr√©e des emplois locaux\n" +
                   "‚Ä¢ Chaque geste compte pour pr√©server notre plan√®te !";
        }

        // Questions sur l'application
        if (containsAny(lowerMessage, "application", "app", "fonction", "utiliser")) {
            return "üì± **FONCTIONNALIT√âS DE L'APP** :\n" +
                   "‚Ä¢ **Scan** : Identifiez vos d√©chets avec la cam√©ra\n" +
                   "‚Ä¢ **Carte** : Trouvez les points de collecte\n" +
                   "‚Ä¢ **Historique** : Suivez vos actions de recyclage\n" +
                   "‚Ä¢ **ChatBot** : Posez vos questions (c'est moi !)\n" +
                   "‚Ä¢ **Profil** : G√©rez vos pr√©f√©rences";
        }

        // Remerciements
        if (containsAny(lowerMessage, "merci", "thanks", "thank you")) {
            String[] thanks = {
                "Avec plaisir ! N'h√©sitez pas si vous avez d'autres questions ! üòä",
                "De rien ! Continuez √† recycler, c'est bon pour la plan√®te ! üå±",
                "Ravi d'avoir pu vous aider ! Ensemble, prot√©geons l'environnement ! ‚ôªÔ∏è"
            };
            return thanks[random.nextInt(thanks.length)];
        }

        // Questions non reconnues
        if (containsAny(lowerMessage, "quoi", "comment", "pourquoi", "quand", "o√π")) {
            return "ü§î Je ne suis pas s√ªr de comprendre votre question. " +
                   "Pouvez-vous reformuler ? Je peux vous aider avec :\n" +
                   "‚Ä¢ Le tri des d√©chets (plastique, verre, papier, m√©tal...)\n" +
                   "‚Ä¢ Les points de collecte\n" +
                   "‚Ä¢ L'impact environnemental\n" +
                   "‚Ä¢ L'utilisation de l'application";
        }

        // R√©ponse par d√©faut
        String[] defaultResponses = {
            "Je suis sp√©cialis√© dans le recyclage ! Posez-moi des questions sur le tri des d√©chets, les mat√©riaux recyclables, ou les points de collecte. ‚ôªÔ∏è",
            "Hmm, je ne suis pas s√ªr de comprendre. Je peux vous aider avec le recyclage : plastique, verre, papier, m√©tal, d√©chets organiques, etc. üå±",
            "Int√©ressant ! Mais je suis RecycleBot, votre assistant recyclage. Demandez-moi plut√¥t comment trier vos d√©chets ou o√π les jeter ! üì¶"
        };
        return defaultResponses[random.nextInt(defaultResponses.length)];
    }

    private boolean containsAny(String text, String... keywords) {
        for (String keyword : keywords) {
            if (text.contains(keyword)) {
                return true;
            }
        }
        return false;
    }
} 